<!DOCTYPE html>
<html lang="en">

<head>
    <title>Goddess Anime Cards :: Users</title>
    <meta property="og:type" content="website">
    <meta property="og:site_name" content="Goddess Anime Cards">
    <meta property="og:title" content="Goddess Anime Cards">
    <meta property="og:description" content="Check out all the users on Goddess Anime Cards!">
    <meta property="og:image" content="https://media.tenor.com/hGNZ41ePbjsAAAAC/sagiri-dancing.gif">
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:site" content="Goddess Anime Cards">
    <meta name="twitter:creator" content="Goddess Anime Cards">
    <meta name="twitter:card" content="summary_large_image">
    <meta content="#43B581" data-react-helmet="true" name="theme-color" />
    <link rel="stylesheet" href="/assets/css/utils.css">
    <style>
        .command {
            color: #fff;
            background-color: #7289da63;
            /*#7289da1a*/
            border-radius: 3px;
            padding: 3px 6px;
            font-size: 14px;
            line-height: 1.5;
            white-space: nowrap;
            vertical-align: baseline;
            font-weight: 400;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";

        }

        .command::before {
            content: "/";
        }

        .command::after {
            content: " ";
        }

        /* Tooltip Styles */
        .tooltip-inner {
            background-color: #333;
            color: #fff;
            border-radius: 4px;
            padding: 8px 12px;
            font-size: 14px;
            line-height: 1.6;
            white-space: nowrap;
            font-weight: 400;
            font-family: "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .tooltip.bs-tooltip-bottom .arrow::before,
        .tooltip.bs-tooltip-auto[x-placement^="bottom"] .arrow::before {
            border-bottom-color: #333;
        }

        .tooltip.bs-tooltip-top .arrow::before,
        .tooltip.bs-tooltip-auto[x-placement^="top"] .arrow::before {
            border-top-color: #333;
        }

        .tooltip.bs-tooltip-left .arrow::before,
        .tooltip.bs-tooltip-auto[x-placement^="left"] .arrow::before {
            border-left-color: #333;
        }

        .tooltip.bs-tooltip-right .arrow::before,
        .tooltip.bs-tooltip-auto[x-placement^="right"] .arrow::before {
            border-right-color: #333;
        }

        .tooltip.bs-tooltip-bottom .arrow::after,
        .tooltip.bs-tooltip-auto[x-placement^="bottom"] .arrow::after {
            border-bottom-color: #333;
        }

        .tooltip.bs-tooltip-top .arrow::after,
        .tooltip.bs-tooltip-auto[x-placement^="top"] .arrow::after {
            border-top-color: #333;
        }

        .tooltip.bs-tooltip-left .arrow::after,
        .tooltip.bs-tooltip-auto[x-placement^="left"] .arrow::after {
            border-left-color: #333;
        }

        .tooltip.bs-tooltip-right .arrow::after,
        .tooltip.bs-tooltip-auto[x-placement^="right"] .arrow::after {
            border-right-color: #333;
        }

        .tooltip-inner {
            max-width: 900px;
        }
    </style>
</head>

<body>

    <%- include ("../templates/header.ejs") %>
        <!-- main content -->
        <main class="main">
            <div class="container">
                <div class="row row--grid">
                    <!-- breadcrumb -->
                    <div class="col-12">
                        <ul class="breadcrumb">
                            <li class="breadcrumb__item"><a href="/">Home</a></li>
                            <li class="breadcrumb__item breadcrumb__item--active">Users</li>
                        </ul>
                    </div>
                    <!-- end breadcrumb -->

                    <!-- title -->
                    <div class="col-12">
                        <div class="main__title main__title--page">
                            <h1>Users</h1>
                        </div>
                    </div>
                    <!-- end title -->

                    <!-- filter -->
                    <div class="col-12">
                        <div class="main__filter">
                            <form action="#" class="main__filter-search">
                                <input type="text" placeholder="Search for a userâ€¦" id="searchInput">
                                <button type="button"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                        <path
                                            d="M21.71,20.29,18,16.61A9,9,0,1,0,16.61,18l3.68,3.68a1,1,0,0,0,1.42,0A1,1,0,0,0,21.71,20.29ZM11,18a7,7,0,1,1,7-7A7,7,0,0,1,11,18Z" />
                                    </svg></button>
                            </form>

                            <!-- WILL COME SOON! -->
                            <!-- <div class="main__filter-wrap">
                               
                                <select class="main__select" name="status">
								<option value="rating">By rating</option>
								<option value="views">By views</option>
								<option value="popularity">By popularity</option>
							</select>
                            </div> -->
                        </div>
                    </div>
                    <!-- end filter -->

                </div>

                <!-- authors -->
                <div class="row row--grid" id="users-list">
                    <% users.forEach(e=> { %>
                        <div class="col-12 col-sm-6 col-lg-4 col-xl-3 cards" id="realUsers">
                            <div class="author">
                                <a href="<%= e.banner %>" class="author__cover author__cover--bg"
                                    data-bg="<%= e.banner %>">
                                </a>
                                <div class="author__meta">
                                    <a href="<%= e.avatar %>"
                                        class="author__avatar <%= e.isVerified ? 'author__avatar--verified' : '' %>">
                                        <img src="<%= e.avatar %>" alt="<%= e.username %>">
                                    </a>
                                    <p style="display: none;" id="u-badges">
                                        <%= e.badges %>
                                    </p>
                                    <h3 class="author__name"><a href="/user/<%= e.discordId %>"></a>
                                        <%= e.displayName %>
                                    </h3>
                                    <h3 class="author__nickname"><a href="/user/<%= e.discordId %>"></a>
                                        @<%= e.username %>
                                    </h3>
                                    <p class="author__text">
                                        <%= e.about %>
                                    </p>
                                    <div class="author__wrap">
                                        <div class="author__followers">
                                            <button class="author__follow" type="button"
                                                onclick="window.location.href='/user/<%= e.discordId %>'">View
                                                Profile</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <% }) %>
                </div>
                <!-- end authors -->

                <!-- paginator -->
                <div class="row row--grid">
                    <div class="col-12">
                        <div class="paginator">
                            <span class="paginator__pages" id="user-len">
                            </span>
                        </div>
                    </div>
                </div>
                <!-- end paginator -->
            </div>
        </main> <!-- end main content -->

        <%- include ("../templates/footer.ejs") %>
            </div>
            </div>

            <script>
                $(function () {
                    $('[data-toggle="tooltip"]').tooltip()
                })
            </script>
            <script>
                // This script is designed to implement search functionality and user interface interactions for a web page containing cards with user information.

                // Event listener for keydown events on the whole document
                document.addEventListener('keydown', function (event) {
                    // Check if the pressed key is "u"
                    if (event.key === "u") {
                        // If "u" key is pressed, scroll the first element with class "paginator" into view smoothly
                        document.querySelector('.paginator').scrollIntoView({
                            behavior: 'smooth'
                        });
                    }
                });

                // Function to update the displayed number of users and members
                const updateUserLen = () => {
                    let userLen = 0;

                    // Get all elements with class "cards"
                    cards.forEach(card => {
                        // Count the visible cards by checking their style.display property
                        if (card.style.display != 'none') {
                            userLen++;
                        }
                    });

                    // Update the content of the element with id "user-len" to show the number of users and members
                    document.querySelector('#user-len').innerHTML = `Showing ${userLen} ${userLen == 1 ? 'member' : 'members'}`;
                }

                // Function to update the document title with an optional search term
                const updateDocumentTitle = (m) => {
                    // Set the document title with the format "Goddess Anime Cards :: Users (search term)"
                    document.title = `Goddess Anime Cards :: Users ${m ? `(${m})` : ''}`;
                }

                // Get the search input elements and card elements
                const search = document.querySelector('.main__filter-search');
                const searchButton = search.querySelector('button');
                const searchInput = search.querySelector('input');
                const cards = document.querySelectorAll('.cards');

                // Event listener for click events on the search button
                searchButton.addEventListener('click', () => {
                    // Get the lowercase search value from the input field
                    const searchValue = searchInput.value.toLowerCase();

                    // Loop through all card elements
                    cards.forEach(card => {
                        // Get the lowercase text content of the card title
                        const cardTitle = card.querySelector('.author__nickname').textContent.toLowerCase();
                        if (cardTitle.includes(searchValue)) {
                            // If the card title contains the search value, display the card and update related information
                            card.style.transition = 'all .20s ease-in-out';
                            card.style.display = 'block';
                            card.style.opacity = '1';
                            updateUserLen();
                            updateDocumentTitle(search.querySelector('input').value);
                        } else {
                            // If the card title does not match the search value, hide the card with a transition effect
                            card.style.transition = 'opacity .20s ease-in-out';
                            card.style.opacity = '0';
                            setTimeout(() => {
                                card.style.display = 'none';
                            }, 100);
                        }
                    });
                });

                // Event listener for keyup events on the search input
                searchInput.addEventListener('keyup', (e) => {
                    // Trigger the click event on the search button to initiate the search
                    searchButton.click();
                    // If there is a search term, log it to the console
                    if (e.target.value.length > 0) {
                        console.log(`User searched for ${e.target.value}`);
                    }
                });

                // Event listener for the submit event on the search form
                search.addEventListener('submit', (e) => {
                    // Prevent the default form submission behavior
                    e.preventDefault();
                });

                // Event listener for keyup events on the whole document
                document.addEventListener('keyup', (e) => {
                    // Check if the pressed key is "/"
                    if (e.key === '/') {
                        // If "/" key is pressed, focus on the search input field
                        searchInput.focus();
                    } else if (e.key === '?' && !searchInput.matches(':focus')) {
                        // If "?" key is pressed and the search input is not focused, show a help menu using SweetAlert library
                        swal({
                            title: "Help Menu",
                            text: "Search - /\nHelp Menu - ?\nClose - ESC",
                            icon: "info",
                            button: "Close",
                        });
                    }
                });

                // Check if the URL includes a search query parameter (e.g., "?search=value")
                if (window.location.search.includes('?search=')) {
                    // Extract the search value from the URL and set it in the search input field
                    const searchValue = window.location.search.split('?search=')[1].toLowerCase();
                    searchInput.value = searchValue;
                    // Trigger the click event on the search button to initiate the search with the extracted value
                    searchButton.click();
                }

                // Initial call to update the displayed number of users and members
                updateUserLen();

                // Set interval to periodically update the displayed number of users and members (every 1000ms)
                setInterval(() => {
                    updateUserLen();
                }, 1000);

            </script>

</body>

</html>